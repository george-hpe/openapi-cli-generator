// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/commands.tmpl
// templates/main.tmpl

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTemplatesCommandsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x5b\x6f\xdb\x46\xf6\x7f\x26\x3f\xc5\x29\x91\x14\x64\x2c\x53\x69\xff\xc5\xff\x41\x5b\x2d\x90\x38\x17\x1b\x68\x1c\xaf\xed\xb4\x0f\x5e\x63\x33\x22\x8f\xa4\x81\xc9\x21\x3d\x1c\xfa\x02\x95\xdf\x7d\x71\x66\x86\x37\x91\x92\xed\xee\xbe\x6c\x1e\x1c\x89\x67\x38\xe7\xfe\x3b\x17\x4d\xa7\x70\x94\xc5\x08\x2b\x14\x28\x99\xc2\x18\x16\x8f\x90\xe5\x28\x58\xce\x0f\xa3\x84\x1f\x5a\x42\x26\x43\xf8\xf0\x15\x4e\xbf\x5e\xc2\xc7\x0f\x27\x97\xa1\x3b\x9d\xc2\x05\x22\xac\x95\xca\x8b\xd9\x74\xba\xe2\x6a\x5d\x2e\xc2\x28\x4b\xa7\x31\x13\x1c\x93\x95\x62\x8f\x49\x26\xa7\xa3\x77\xb9\x6e\xce\xa2\x1b\xb6\x42\x48\x19\x17\xae\xcb\xd3\x3c\x93\x0a\x7c\xd7\xd9\x6c\x80\x2f\x21\x3c\xd1\x0f\x8a\xf0\x53\xaa\xa0\xaa\xbc\x65\xaa\xbc\xcd\x06\x50\xc4\x50\x55\x83\x43\x17\x4a\x72\xb1\x2a\xe8\x60\x61\x3e\xee\x39\x7c\xc9\x53\xa4\x93\x8a\xa7\xd8\x39\xe6\x3a\xde\xcb\x54\x98\x46\x09\xf7\xfa\x6f\xe5\x37\xab\x29\x4a\x99\xc9\x62\x8b\x50\x70\x59\xe6\x05\x8a\x69\x92\xad\x64\x39\xa0\xe6\xcb\x9f\xfe\x6f\x1a\x65\x0b\xc9\x46\x29\x77\x3c\x47\xa9\x29\x59\x7e\xb3\x0a\xb9\x98\xae\x7f\x16\x99\x98\xae\x50\xa8\x04\x53\x26\xc2\xbb\x9f\x3d\x37\x70\xdd\xcd\x06\x62\x5c\x72\x81\xe0\xe5\x4c\xb2\xb4\xf0\xac\x01\x0e\x41\x32\xb1\x42\x08\xbf\xe6\x8a\x67\x82\x25\x67\x9a\xac\xa9\x9a\xcc\x97\x80\xb7\x10\x5e\x3e\xe6\x08\xde\x22\xcb\x12\x64\xc2\xbc\xec\x38\x51\x1a\x87\x9f\x12\xb6\x2a\xfc\x20\x7c\x9f\x65\x89\x4f\x56\x0b\x8f\x7e\x3b\x39\x65\xc6\x92\x13\x58\xb2\xa4\xc0\x09\x68\xc2\x07\x2c\x22\xc9\x35\x1f\x22\x06\x96\x03\x26\x05\xf6\xd9\x70\xa1\xfe\xff\x97\x31\x26\x27\x44\x18\xe1\xf2\xf6\xa5\x1c\x96\x49\xc6\x76\xf0\xf8\x64\x48\x63\x5c\xc2\xe7\xf0\x19\xde\x68\x82\x70\xe4\x42\xcf\x7b\xe2\xbe\x26\x4e\x0f\xdb\x60\xec\xf8\xec\x0f\xc6\x15\x4a\xeb\xac\xa1\x33\xee\x19\x57\x87\x74\xbd\x39\xb7\xdb\x31\x96\x7e\xb1\xa6\x4c\x33\xfc\x7b\x2c\xa3\x84\x87\x17\xa8\x8e\xca\x42\x65\xa9\xe1\x11\xa5\x71\xe0\xba\x0e\x5f\x42\x97\xef\x31\x2b\xec\x47\xd8\xb8\x8e\x63\x42\x2d\x7c\xcf\x45\x7c\xd6\xbc\x56\x1f\x0e\x5c\xa7\x72\x3b\x59\xb6\xd9\xc0\x2b\x41\xe2\xcd\xe6\x10\x5a\x39\xf5\x43\x96\x73\xfd\xec\x73\xb6\xf5\xf4\xac\x5c\x24\x3c\xd2\x34\xf3\xb1\x3d\xe1\xde\x31\x09\xf5\xcb\x55\x75\x51\x2e\xa2\x2c\x4d\x99\x88\x81\x42\xd8\x75\x97\xa5\x88\xba\x74\x94\x77\x28\x49\xec\xab\xeb\x94\xe5\x57\x06\x2b\xae\xcd\x7f\xa4\x8a\x44\x55\x4a\x31\x46\xdd\x68\x5f\x59\x8f\xbc\x2a\xf4\x45\x5a\x24\x7b\xa7\x8d\x87\xd1\xf7\x1c\xc7\x8b\x5b\xcf\x7b\x33\xed\x0d\x7b\xc7\x76\x4c\x4c\xcc\xf9\x52\x26\x5b\xe7\xbe\x9d\xff\xd6\xd0\xab\x89\x91\xa6\x0e\x9c\xca\x35\x86\xb5\xd2\x65\x39\x01\x14\x5d\x48\x02\x7e\xad\xbf\x19\x19\xa7\x53\xe8\xdb\xb5\xaa\x28\x36\x1a\x9b\x12\xb5\x09\x11\xd7\xe9\x5a\x70\xfc\x05\xbf\x61\x1c\x9e\xe3\x6d\xc9\x25\xc6\x0d\xb8\xf4\x6f\x36\x16\x99\x40\x23\xb9\x09\x1c\x78\xa3\xf1\x2d\xfc\x9d\xfe\x5a\xac\x3e\x62\xe2\x98\xdd\xe1\xfb\x2c\x7e\x84\xaa\x9a\xc0\x82\x3e\x58\x8b\xd6\x6f\x07\xe0\xbf\x69\x11\xf0\x1c\x8b\x3c\x13\x14\xeb\xc4\xf4\x5c\x3b\x52\x83\x00\xbd\xae\x31\xd9\x04\xeb\x9a\x89\x38\x41\x79\xc6\xd4\x9a\xcc\xa3\x13\xe3\xd8\x3c\xab\xb3\xc6\x75\x28\xe0\x47\xc3\x4a\xbb\xb3\x7b\x85\xb9\xc1\x44\x74\x55\x81\x07\x07\xd0\x21\xbb\x8e\x43\x89\xe5\xb4\xf1\x62\x54\xfd\x8c\xaa\x46\x0b\x43\xd2\x58\xc0\x97\x60\x0f\xce\xe7\xe0\x79\x86\x59\xfd\x64\x2c\x8c\xaf\x9a\xdb\x4e\x84\xaa\xaf\x3a\xe4\x22\xc6\x07\x2f\xb8\xbe\xd2\x51\x74\x5d\xcb\x50\xca\x84\x04\x30\x87\x0e\xb4\xde\x5a\x03\x52\xd8\x02\x91\x8d\x1f\x3e\x81\x57\xda\x35\x3a\x7e\x06\x4e\x25\xa9\xda\x92\x61\x4e\x86\x27\x82\x4a\x8e\x5a\xd7\x50\xab\xd9\xcd\xad\xcb\x8a\xf0\x1c\xf3\x84\x45\xe8\x97\x32\xd1\x60\xf4\x7d\xf3\x5d\x47\x87\x7d\xdb\x5a\x7e\xb3\xf9\x5e\x7d\xd7\xb0\xd5\x92\x9a\xf0\x99\xc0\x4f\x41\xcd\xba\x0e\xfc\x3e\x7e\x39\x12\x6f\x49\x64\xc2\xb1\xa3\x84\xa3\x50\x21\x69\xf9\x05\xd5\x3a\xa3\x23\x7e\x40\x59\x44\x32\x04\x6e\x2f\x9d\x9f\xa5\xf0\x50\xdf\xdb\x12\xe5\x63\xa3\x30\x31\x9f\x83\xc4\xdb\xf0\x5d\x1c\xff\x83\x48\xa6\x14\xb4\x58\x3c\xa2\x94\xd5\xa8\x5b\xba\x3a\x0c\xd6\xc8\x62\x94\xe3\x1c\x8e\x35\xed\x25\x2c\x5a\x9b\x75\x4c\xf6\x44\x6b\xe0\xf4\x33\x78\x36\x07\x0b\xf6\x9f\x51\x11\x49\x67\xd8\x9f\xa0\xb8\x4a\x34\x16\x6c\x17\x3f\xcd\xdc\x24\x53\xe7\x9a\x1f\x74\x34\xeb\x97\x4f\x79\xa2\x41\x47\x2b\xd8\x69\x44\x86\xf6\x7d\x86\x81\x97\xa9\x0a\x2f\x72\xc9\x85\x5a\xfa\xde\xeb\x3b\x63\x8f\x8e\x25\x82\x86\x4b\xb7\x55\x18\xb1\xf4\x73\x4c\xfd\x02\x66\xb5\xe5\x9d\x61\xc8\x8e\xe2\x9d\x35\x9a\x06\xbd\x1f\x5a\x28\x18\x97\xea\x28\x13\x0a\x85\x3a\x24\x6b\xd6\x8d\xc6\x17\x8c\x39\xb3\xe8\xe7\x51\x9f\x10\x3f\x5a\xbc\xa1\x3b\x83\x56\x94\x8e\x24\x94\x35\x06\x08\xdf\xe3\x32\x93\xe8\x77\x70\x6c\x62\xdd\x3e\x21\xe6\x81\x49\xb5\x22\xd7\xb8\x4a\x31\x41\x12\x7d\xc8\x7c\x8b\x61\xf4\xf0\x87\x39\x08\x9e\x18\xb1\x6d\x51\x15\x3c\x99\x98\x3f\xa6\x43\x0e\xff\x90\x2c\xf7\x51\xca\x09\x78\x94\x72\x58\x28\x58\x32\x9e\x60\xac\xa3\x46\xcb\x44\xe5\x3d\xc6\x28\x8b\x31\x1e\xc2\xba\x6b\xd8\x91\x24\xe1\x85\x62\xaa\x2c\xf4\x1c\xf3\x2b\xfc\xf2\xf6\xad\xe1\x6c\x85\xb1\x90\xf0\x4d\xa4\x4c\x16\x6b\x96\xd4\xa5\xc2\x37\x4a\xfc\x68\x39\x04\x7f\x1b\x88\xfe\x1c\xd9\x9b\x6b\x13\x6a\x22\xa4\xbd\xbb\xab\x8a\xb6\x75\x65\x62\x6e\xaf\x45\x3e\xd2\x7f\x4b\xdf\x3b\xbe\xbc\x3c\x83\xd7\xf1\x0c\x5e\x17\xde\x64\x5b\xc1\xe6\x81\xf6\x67\xd0\xd8\x8a\x2d\x15\x36\xba\x1a\x47\xbe\xa3\x47\xbb\xfc\x48\xaa\xd7\x9a\x1b\x4b\x9a\x1b\xba\xfa\xd7\xb6\x9f\x1b\x9a\x09\x56\x81\x3d\x47\x50\x1b\x8f\x72\xc9\x22\xdc\x54\x94\x40\xa1\x3f\xf0\x54\xd0\x85\x1f\x8b\xd4\xda\x02\x3d\x29\xb4\x2d\x86\xdd\xa2\xc5\xe8\x7b\xdd\xbc\x6a\x80\xee\xf6\xc3\x2f\xea\x4f\x9a\x56\xe8\xbf\xd1\xa9\x04\xc6\x6b\xda\x50\x4c\x29\x4c\x73\x45\xd2\xbd\x75\x1d\x67\x99\x49\xa8\x1f\xfd\xaa\xa5\x33\xd2\x87\xef\xcc\xc3\xa2\x81\x3c\x7b\xea\xe0\xc0\x35\x71\xd1\x33\x87\x8d\xdd\x31\xed\x5a\x4d\xfe\x13\x3d\x07\x0a\x06\x9d\xac\x19\xcb\x83\x61\xf4\x1f\x65\x65\x12\x83\xc8\x14\x44\x2c\x49\xc0\x7a\xa9\xe9\x40\xeb\xf8\xa7\xbf\x94\xcc\x2c\x52\x25\x4b\xa0\x13\x32\x35\x25\x65\x2a\x5a\x9b\xb6\xdd\xe9\xd6\x66\xfd\xdc\x3a\xfe\x8b\xf9\x5c\xd7\x26\xc7\xdc\x66\x0c\x65\xe2\xfe\x33\x2a\x7d\xe8\x77\x96\x94\x26\xbf\x43\x8d\x8f\x0f\xca\x22\xe3\x05\x26\x18\x29\x83\xe0\xb6\x94\xbd\x4b\x92\x0b\x54\x8a\xfa\x14\x3f\xe8\xe5\xc4\xb8\x2d\x9e\x63\x8c\x15\x2a\xa8\x25\xbf\x23\x59\x8c\x21\xac\x25\x1c\x4d\xea\xca\xad\x85\x36\x15\xe6\x92\x80\x50\xcb\x77\x75\xbd\x78\x54\xa8\xd3\xe9\xe3\x43\x8e\x91\xc2\x18\xfe\x04\x53\x72\xc0\x7b\x7d\x4b\xd9\x16\x4c\xac\x4d\xff\x8a\xbc\x7f\x58\x09\x8d\xed\x09\xb1\x4a\xd9\x48\xda\xd4\x48\x43\xb5\x77\x35\x7d\x90\x46\x24\x1a\xb1\xed\x5b\x4d\xe9\xdc\x62\x57\x63\x9a\x49\x5a\x88\x98\x20\xfb\x48\x64\xd1\x1a\x62\x2c\x28\x38\xa1\xd0\x57\x2d\x30\x62\x65\x81\xf0\xba\x00\x5e\x18\xe8\x1b\xb8\x6c\xbf\x2d\x1a\x11\x3b\x13\xba\xe3\x38\x0b\x89\xec\xa6\xa5\x35\xd5\xd8\xa9\xfa\xad\x11\x7d\x53\x3c\xc5\xf0\x22\x41\xcc\x7d\x33\xb1\x27\x8c\x2a\xf2\x1b\xf3\x1c\xa3\x4c\xc4\x0d\xe2\x12\x64\xda\x2c\xff\xfb\x7c\x6f\x9a\xf7\x4d\x72\x8a\xf7\xbe\xf7\x85\x3d\xf0\xb4\x4c\xeb\x1b\x0a\xc0\x87\x08\x31\xee\x56\xbf\xb6\x4c\x6c\xa1\xe2\xd6\x58\x7b\x8e\x2b\x5e\x10\xd2\x17\xfd\xf9\x57\x0f\x3c\x32\xcb\x54\x5d\x15\xce\xb3\x4c\x99\x69\xbe\xe8\x8f\x34\xfa\xd0\x1c\x7e\xd4\x2b\xa8\xf0\xc8\x50\xb4\xe4\xdf\x0a\x9c\xf5\x46\x1c\x33\x81\xea\x01\xd1\x10\xc2\x4b\xdb\xfc\x19\xca\x6f\x99\x58\xcd\x6c\x4c\xcb\x9b\x38\xbb\x17\xfe\xe8\xee\x63\xe2\x36\x3d\xc8\x70\xcc\x9a\x83\x92\x25\xba\xdd\xa2\x59\xcb\x6f\x67\xd3\xf9\x16\xef\xee\x09\x12\xa1\xc9\xab\x7d\x32\xb8\x8e\xd9\xb4\xe8\x16\xac\xb7\x65\x21\x47\x92\xd5\x76\x5a\x84\x0e\xf4\x4d\x41\xef\x83\x46\x7e\x88\x50\x2a\xc6\x05\xe0\x1d\x0a\x05\x99\x6c\x02\x9c\xfa\x2a\x30\x6e\xe5\x62\xd5\x35\x98\xf7\x3e\xc9\xa2\x1b\x8a\x02\x8c\x4a\x2d\x20\xd9\xa1\x2c\xb0\x80\x3c\x33\xad\x85\xca\x20\x47\xc9\xb3\x98\x13\xd4\x3e\x42\xb4\xc6\xe8\xe6\x2f\x70\xac\xac\xc3\xa9\x89\xb4\x8a\xf9\xa4\xce\xd6\x50\xb4\xa3\xe0\x3a\xa6\xe4\xda\xd5\x4f\xbd\xfc\x69\x47\x5b\x0a\x6e\x93\x88\x51\x1a\xef\x30\x61\x27\xac\xc2\x6f\x45\x1b\x3b\xcd\x04\x10\xbe\x4b\x38\x23\xdd\x9b\x1c\xb6\x0f\x66\x70\xd5\x5b\xac\x38\xbd\x09\x66\xf0\x96\xe3\x68\x1e\x1d\x06\xdb\x1d\x79\xbd\x4d\x19\x21\x74\x63\xbc\xd9\x99\xd9\xb3\xbb\xa2\x5c\x87\x5e\x1d\xde\x24\xb6\x5c\x15\x33\x30\x16\xf8\xc2\x05\x65\xfc\x29\x3d\x23\x70\x49\x50\xec\x2d\xd5\xf5\x1d\xe7\xa5\x98\x01\x19\xdd\x27\x8b\xbe\xe9\x99\x73\x02\x4c\xae\x8a\xc6\x28\xb5\x53\xba\xad\xef\x33\x9b\xa3\x57\x0f\xbd\x21\x78\x8f\x5c\xc4\xf1\x8a\x6e\x7d\x80\xaa\xba\x1e\xf6\x10\x23\x6d\xb4\xe3\x38\x66\xf1\x1d\x7e\x62\x8a\x25\x4b\xdf\xd3\x65\x41\xb7\x0b\x9c\x2c\xa9\xe7\x27\x94\x32\xa8\x7d\xe2\x76\x5d\x63\xbe\xd1\xe1\x6e\xcc\xda\xdd\xa4\x81\x70\x02\xd1\x44\x17\xa4\x7a\xf1\xdd\xaa\x50\x0f\x5f\x7e\xd0\x5f\x9b\x75\x91\xbf\xb5\x83\xc4\x22\x2b\x65\x84\x76\x17\x60\xbe\x34\x9b\xf2\x0e\xbd\x87\x58\x7b\xb0\x82\xfe\x79\x5b\x6f\xf6\xa0\x03\xc0\xfb\x80\x2c\x81\x7b\xae\xd6\xb0\x75\x10\xea\xcf\xe1\xce\xdc\xdd\x29\x54\xb0\x4b\xc5\xbd\x0b\xc2\x7e\x7e\x8f\xa7\x77\xdd\xb4\xe1\x03\x4b\xf3\x04\x0b\xdb\x30\xbb\xfd\xd6\x0d\x1f\xf4\xfd\x1f\xeb\x43\x36\xb1\x9a\x97\x0e\xe6\xe0\x81\x5e\x99\x35\xd0\x6d\x75\xa2\x59\xc5\x0f\xe0\x00\x3c\x6d\x8f\x46\x5e\x8b\x16\xfa\x21\x52\xf8\xfd\x53\x78\xc3\x1a\xbe\x07\x78\x76\xe0\xce\x2e\xd8\xd9\x89\x3a\x7b\x41\x67\x80\x39\xdb\xc8\x52\x4d\x46\x76\x03\xfb\xf0\xe6\x99\x70\x53\xab\x71\xcc\xe3\x18\x45\xc3\xce\x7c\x9d\xe9\xe6\xa9\x21\x8d\x8a\x60\x5d\x35\x6b\x1c\x6b\x4e\x3d\x89\x62\xbb\xb0\xeb\xaf\x40\x57\xad\xc4\x70\x25\xe2\x38\x8b\x2c\x7e\x9c\x74\x67\xfa\xcf\xa8\xe8\x80\x3f\xdc\x7a\x98\xeb\xaf\xc6\x25\xac\xaa\xd9\xb5\x85\x9a\xd1\x8e\x79\x1b\xad\xbe\x09\xb6\x48\x90\x2a\x30\x35\xf6\x24\xc5\x00\xb2\xaa\x41\x11\xe9\x36\xcc\xe1\x29\x62\x5c\xd4\x8b\x07\xa8\x2a\x1a\x4d\xda\x46\xf5\x5f\x4d\x00\x3f\x6f\xfc\x7b\x1a\xbf\x5f\x8a\xda\x7b\xf6\xee\xed\xc2\xfd\x05\x16\x33\xf8\x1e\xd9\xad\x48\x93\xc0\x23\x66\x73\xb7\xea\x15\xb9\xf5\x53\x26\x53\x6a\x8c\xa5\xfd\xe4\xef\x59\xd1\x0c\x58\xdb\x97\x89\xaf\x59\xc2\xec\x64\x3a\xd6\xf9\x99\x09\xe6\xf6\xac\xc1\xbd\xb1\x29\xd1\x6d\x12\x7b\x74\x85\xdc\x01\xac\xd1\x65\x72\x8f\xc7\x95\x37\xd8\x83\x7b\xd7\x30\x6f\xc2\xf7\x15\xf5\xc6\xd7\x2d\xc3\x5e\x74\xed\x19\xaa\x47\x63\x71\xfc\x37\x45\xeb\x80\x76\xb5\xfb\xe4\x0f\x8b\x6d\xa3\xe1\xdc\xef\x2e\x11\x7d\x9e\x3a\x42\x0b\x3d\xcc\x65\xa6\xaf\x24\x0c\xe9\x36\x6b\x2f\x9f\xe7\xdb\xfb\x74\xca\x37\x46\xdd\x1a\xe3\x77\x87\xed\x30\x7c\xf6\x0c\xf1\xc3\x3e\xa5\x8d\x25\x12\x5f\xae\xea\x04\x23\xf5\x86\x0b\xe2\xee\xa4\x3e\xe6\x9f\xfe\xaf\x30\xf1\xb6\xb9\x06\x31\xf4\xbf\x6e\x30\x1b\x3a\xe1\x05\x2a\x8d\xe0\xaf\x78\x6c\xa1\xfb\x49\x43\xed\xef\x6f\x6d\xc0\xee\x82\xc9\xb1\x20\xec\x38\xaf\x03\x8e\xf7\x7b\x7b\xda\x6d\x4b\xd8\x1d\x87\x1e\xf3\x47\x54\xaf\xfa\xcd\xed\x56\xed\x35\x15\xb9\x5e\x49\xf4\x20\x64\xa4\xb7\x1b\x6d\x84\xc7\xfb\x60\xbb\x76\xf5\x7b\xed\x60\xe5\xfe\x3b\x00\x00\xff\xff\xd5\xb6\x5c\xf2\xf8\x23\x00\x00")

func bindataTemplatesCommandsTmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesCommandsTmpl,
		"templates/commands.tmpl",
	)
}



func bindataTemplatesCommandsTmpl() (*asset, error) {
	bytes, err := bindataTemplatesCommandsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/commands.tmpl",
		size: 9208,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1667146020, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x41\x4b\xc3\x40\x10\x85\xcf\x3b\xbf\x62\xc8\x41\x12\xb0\x9b\x7a\xed\xad\x68\x0e\x5e\xac\x88\x78\x5f\x37\x93\xed\x60\x76\x66\xd9\x6c\x4a\x25\xe4\xbf\x4b\x2a\xe2\xed\xbd\xf7\xf1\x1e\x2f\x39\xff\xe5\x02\x61\x74\x2c\x00\x1c\x93\xe6\x82\x35\x98\x2a\x70\x39\xcf\x9f\xd6\x6b\x6c\x7b\x27\x4c\x63\x28\xee\x7b\xd4\xdc\x6a\x22\x71\x89\x77\x7e\xe4\x5d\x20\xa1\xec\x8a\xe6\xd6\x8f\x5c\x41\x03\x30\xcc\xe2\x6f\x63\x75\x83\x0b\x18\x3f\xb2\x7d\x16\x2e\xf5\xdd\xa6\x1e\x55\x06\x0e\x0b\x18\x73\x4c\xe9\xc5\x45\x3a\x20\x62\xb5\x2c\x68\x37\x83\xeb\x5a\xdd\x83\x31\x9d\x5c\x5e\x33\x0d\x7c\x3d\xfc\xb3\x4e\x2e\x7f\xf8\x83\xf2\xc4\x2a\xb7\xea\x83\xdd\xdb\xfd\x96\xae\x0d\x80\x69\x5b\x7c\x3f\x3d\x9d\x0e\x78\xec\x7b\xcc\x14\x78\x2a\x94\xd1\x6b\x8c\x4e\xfa\x09\xcf\x94\xc9\xc2\xef\xa7\x37\xd5\x62\xbb\x2b\xf9\xb9\x50\xdd\xc0\x0a\x3f\x01\x00\x00\xff\xff\xd7\x90\x9c\xb4\x08\x01\x00\x00")

func bindataTemplatesMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesMainTmpl,
		"templates/main.tmpl",
	)
}



func bindataTemplatesMainTmpl() (*asset, error) {
	bytes, err := bindataTemplatesMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/main.tmpl",
		size: 264,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1664358933, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"templates/commands.tmpl": bindataTemplatesCommandsTmpl,
	"templates/main.tmpl":     bindataTemplatesMainTmpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"templates": {Func: nil, Children: map[string]*bintree{
		"commands.tmpl": {Func: bindataTemplatesCommandsTmpl, Children: map[string]*bintree{}},
		"main.tmpl": {Func: bindataTemplatesMainTmpl, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
