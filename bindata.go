// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/commands.tmpl
// templates/main.tmpl

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTemplatesCommandsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x5b\x73\xdb\xb8\x15\x7e\x26\x7f\x05\x96\xe3\xec\x90\xb1\x4c\x65\xb7\x3b\x7d\x50\x57\x9d\x49\x9c\x8b\x3d\x13\x3b\xae\xed\x6c\x1e\x5c\x4f\x03\x91\x47\x12\xc6\x20\x40\x83\x90\x2f\xd5\xf2\xbf\x77\x0e\x00\xde\x44\x4a\xb6\xd3\xbe\x34\x0f\x8e\xc4\x03\xe2\xdc\xbf\x73\xd1\x78\x4c\x0e\x65\x0a\x64\x01\x02\x14\xd5\x90\x92\xd9\x23\x91\x39\x08\x9a\xb3\x83\x84\xb3\x03\x47\x90\x2a\x26\xef\xbf\x90\xd3\x2f\x97\xe4\xc3\xfb\xe3\xcb\xd8\x1f\x8f\xc9\x05\x00\x59\x6a\x9d\x17\x93\xf1\x78\xc1\xf4\x72\x35\x8b\x13\x99\x8d\x53\x2a\x18\xf0\x85\xa6\x8f\x5c\xaa\xf1\xe0\x5d\xbe\x9f\xd3\xe4\x86\x2e\x80\x64\x94\x09\xdf\x67\x59\x2e\x95\x26\xa1\xef\xad\xd7\x84\xcd\x49\x7c\x6c\x1e\x14\xf1\xc7\x4c\x93\xb2\x0c\xe6\x99\x0e\xd6\x6b\x02\x22\x25\x65\xd9\x3b\x74\xa1\x15\x13\x8b\x02\x0f\x16\xf6\xe3\x8e\xc3\x97\x2c\x03\x3c\xa9\x59\x06\xad\x63\xbe\x17\xbc\x4c\x85\x71\xc2\x59\xd0\x7d\x2b\xbf\x59\x8c\x41\x29\xa9\x8a\x0d\x82\x2a\xc6\xff\x06\x25\xb9\x5c\x8c\xb9\x5c\x6c\x10\x8b\x7c\xfe\xcb\x5f\xc6\x89\x9c\x29\x3a\x48\xb9\x63\x39\x28\x43\x91\xf9\xcd\x22\x66\x62\xbc\xfc\x55\x48\x31\x5e\x80\xd0\x1c\x32\x2a\xe2\xbb\x5f\x03\x3f\xf2\xfd\xf5\x9a\xa4\x30\x67\x02\x48\x90\x53\x45\xb3\x22\x70\xfa\x1f\x10\x45\xc5\x02\x48\xfc\x25\xd7\x4c\x0a\xca\xcf\x0c\xd9\x50\x0d\x99\xcd\x09\xdc\x92\xf8\xf2\x31\x07\x12\xcc\xa4\xe4\x40\x85\x7d\xd9\xf3\x92\x2c\x8d\x3f\x72\xba\x28\xc2\x28\x7e\x27\x25\x0f\xd1\x68\xf1\xe1\xe7\xe3\x53\x6a\x0d\x39\x22\x73\xca\x0b\x18\x11\x43\x78\x0f\x45\xa2\x98\xe1\x83\xc4\xc8\x71\x00\x5e\x40\x97\x0d\x13\xfa\xaf\xbf\x0d\x31\x39\x46\xc2\x00\x97\x37\x2f\xe5\x30\xe7\x92\x6e\xe1\xf1\xd1\x92\x86\xb8\xc4\xcf\xe1\xd3\xbf\xd1\xc6\xe0\xc0\x85\x41\xf0\xc4\x7d\x75\x98\x1e\x34\xb1\xd8\xf2\xd9\x37\xca\x34\x28\xe7\xac\xbe\x33\xee\x29\xd3\x07\x78\xbd\x3d\xb7\xdd\x31\x8e\x7e\xb1\xc4\x44\xb3\xfc\x3b\x2c\x13\xce\xe2\x0b\xd0\x87\xab\x42\xcb\xcc\xf2\x48\xb2\x34\xf2\x7d\x8f\xcd\x49\x9b\xef\x11\x2d\xdc\x47\xb2\xf6\x3d\xcf\x86\x5a\xfc\x8e\x89\xf4\xac\x7e\xad\x3a\x1c\xf9\x5e\xe9\xb7\x92\x6c\xbd\x26\x7b\x02\xc5\x9b\x4c\x49\xec\xe4\x34\x0f\x69\xce\xcc\xb3\x4f\x72\xe3\xe9\xd9\x6a\xc6\x59\x62\x68\xf6\x63\x73\xc2\xbf\xa3\x8a\x54\x2f\x97\xe5\xc5\x6a\x96\xc8\x2c\xa3\x22\x25\x18\xc2\xbe\x3f\x5f\x89\xa4\x4d\x07\x75\x07\x0a\xc5\xbe\xba\xce\x68\x7e\x65\xa1\xe2\xda\xfe\x87\xaa\x28\xd0\x2b\x25\x86\xa8\x6b\xe3\x2b\xe7\x91\xbd\xc2\x5c\x64\x44\x72\x77\xba\x78\x18\x7c\xcf\xf3\x82\xb4\xf1\x7c\x30\x31\xde\x70\x77\x6c\xc6\xc4\xc8\x9e\x5f\x29\xbe\x71\xee\xeb\xf9\xe7\x9a\x5e\x8e\xac\x34\x55\xe0\x94\xbe\x35\xac\x93\x4e\xe6\x88\x4f\x78\x21\x0a\xf8\xa5\xfa\x66\x65\x1c\x8f\x49\xd7\xae\x65\x89\xb1\x51\xdb\x14\xa9\x75\x88\xf8\x5e\xdb\x82\xc3\x2f\x84\x35\xe3\xf8\x1c\x6e\x57\x4c\x41\x5a\x83\x4b\xf7\x66\x6b\x91\x11\xa9\x25\xb7\x81\x43\x5e\x1b\x7c\x8b\xff\xc0\xbf\x0e\xaa\x0f\xa9\x38\xa2\x77\xf0\x4e\xa6\x8f\xa4\x2c\x47\x64\x86\x1f\x9c\x45\xab\xb7\x23\x12\xbe\x6e\x10\xf0\x1c\x8a\x5c\x0a\x8c\x75\x64\x7a\x6e\x1c\x69\x40\x00\x5f\x37\x90\x6c\x83\x75\x49\x45\xca\x41\x9d\x51\xbd\x44\xf3\x98\xc4\x38\xb2\xcf\xaa\xac\xf1\x3d\x0c\xf8\xc1\xb0\x32\xee\x6c\x5f\x61\x6f\xb0\x11\x5d\x96\x24\x20\xfb\xa4\x45\xf6\x3d\x0f\x13\xcb\x6b\xe2\xc5\xaa\xfa\x09\x74\x85\x16\x96\x64\xb0\x80\xcd\x89\x3b\x38\x9d\x92\x20\xb0\xcc\xaa\x27\x43\x61\x7c\x55\xdf\x76\x2c\x74\x75\xd5\x01\x13\x29\x3c\x04\xd1\xf5\x95\x89\xa2\xeb\x4a\x86\x95\xe2\x28\x80\x3d\xb4\x6f\xf4\x36\x1a\xa0\xc2\x0e\x88\x5c\xfc\xb0\x11\xd9\x33\xae\x31\xf1\xd3\x73\x2a\x4a\xd5\x94\x0c\x7b\x32\x3e\x16\x58\x72\xf4\xb2\x82\x5a\xc3\x6e\xea\x5c\x56\xc4\xe7\x90\x73\x9a\x40\xb8\x52\xdc\x80\xd1\xf7\xf5\x77\x13\x1d\xee\x6d\x67\xf9\xf5\xfa\x7b\xf9\xdd\xc0\x56\x43\xaa\xc3\x67\x44\x7e\x89\x2a\xd6\x55\xe0\x77\xf1\xcb\x53\x70\x8b\x22\x23\x8e\x1d\x72\x06\x42\xc7\xa8\xe5\x09\xe8\xa5\xc4\x23\x61\x84\x59\x84\x32\x44\x7e\x27\x9d\x9f\xa5\x70\x5f\xdf\xdb\x15\xa8\xc7\x5a\x61\x64\x3e\x25\x0a\x6e\xe3\xb7\x69\xfa\x0f\x24\xd9\x52\xd0\x60\xf1\x80\x52\x4e\xa3\x76\xe9\x6a\x31\x58\x02\x4d\x41\x0d\x73\x38\x32\xb4\x97\xb0\x68\x6c\xd6\x32\xd9\x13\xad\x81\xd7\xcd\xe0\xc9\x94\x38\xb0\xff\x04\x1a\x49\x26\xc3\xfe\x24\x9a\x69\x6e\xb0\x60\xb3\xf8\x19\xe6\x36\x99\x5a\xd7\xfc\x64\xa2\xd9\xbc\x7c\xca\xb8\x01\x1d\xa3\x60\xab\x11\xe9\xdb\xf7\x19\x06\x9e\x67\x3a\xbe\xc8\x15\x13\x7a\x1e\x06\xaf\xee\xac\x3d\x5a\x96\x88\x6a\x2e\xed\x56\x61\xc0\xd2\xcf\x31\xf5\x0b\x98\x55\x96\xf7\xfa\x21\x3b\x88\x77\xce\x68\x06\xf4\x7e\x6a\xa0\x60\x58\xaa\x43\x29\x34\x08\x7d\x80\xd6\xac\x1a\x8d\x13\x48\x19\x75\xe8\x17\x60\x9f\x90\x3e\x3a\xbc\xc1\x3b\xa3\x46\x94\x96\x24\x98\x35\x16\x08\xdf\xc1\x5c\x2a\x08\x5b\x38\x36\x72\x6e\x1f\x21\xf3\xc8\xa6\x5a\x91\x1b\x5c\xc5\x98\x40\x89\xde\xcb\xd0\x61\x18\x3e\xfc\x69\x4a\x04\xe3\x56\x6c\x57\x54\x05\xe3\x23\xfb\xc7\x36\xc8\xf1\x37\x45\xf3\x10\x94\x1a\x91\x00\x53\x0e\x0a\x4d\xe6\x94\x71\x48\x4d\xd4\x18\x99\xb0\xbc\xa7\x90\xc8\x14\xd2\x3e\xac\xfb\x96\x1d\x4a\x12\x5f\x68\xaa\x57\x85\x19\x63\x7e\x27\xbf\xbd\x79\x63\x39\x3b\x61\x1c\x24\x7c\x15\x19\x55\xc5\x92\xf2\xaa\x54\x84\x56\x89\x9f\x1d\x87\xe8\x6f\x3d\xd1\x9f\x23\x7b\x7d\x2d\xc7\x26\x42\xb9\xbb\xdb\xaa\x18\x5b\x97\x36\xe6\x76\x5a\xe4\x03\xfe\x37\x0f\x83\xa3\xcb\xcb\x33\xf2\x2a\x9d\x90\x57\x45\x30\xda\x54\xb0\x7e\x60\xfc\x19\xd5\xb6\xa2\x73\x0d\xb5\xae\xd6\x91\x6f\xf1\xd1\x36\x3f\xa2\xea\x95\xe6\xd6\x92\xf6\x86\xb6\xfe\x95\xed\xa7\x96\x66\x83\x55\x40\xc7\x11\xd8\xc6\x83\x9a\xd3\x04\xd6\x25\x26\x50\x1c\xf6\x3c\x15\xb5\xe1\xc7\x21\xb5\xb1\x40\x47\x0a\x63\x8b\x7e\xb7\xe8\x30\xfa\xde\x34\xaf\x06\xa0\xdb\xfd\xf0\x8b\xfa\x93\xba\x15\xfa\x5f\x74\x2a\x91\xf5\x9a\x31\x14\xd5\x1a\xb2\x5c\xa3\x74\x6f\x7c\xcf\x9b\x4b\x45\xaa\x47\xbf\x1b\xe9\xac\xf4\xf1\x5b\xfb\xb0\xa8\x21\xcf\x9d\xda\xdf\xf7\x6d\x5c\x74\xcc\xe1\x62\x77\x48\xbb\x46\x93\xff\x46\xcf\x9e\x82\x51\x2b\x6b\x86\xf2\xa0\x1f\xfd\x87\x72\xc5\x53\x22\xa4\x26\x09\xe5\x9c\x38\x2f\xd5\x1d\x68\x15\xff\xf8\x17\x93\x99\x26\x7a\x45\x39\x69\x85\x4c\x45\xc9\xa8\x4e\x96\xb6\x6d\xf7\xda\xb5\xd9\x3c\x77\x8e\x3f\xb1\x9f\xab\xda\xe4\xd9\xdb\xac\xa1\x6c\xdc\x7f\x02\x6d\x0e\xfd\x41\xf9\xca\xe6\x77\x6c\xf0\xf1\x41\x3b\x64\xbc\x00\x0e\x89\xb6\x08\xee\x4a\xd9\x5b\xce\x2f\x40\x6b\xec\x53\xc2\xa8\x93\x13\xc3\xb6\x78\x8e\x31\x16\xa0\x49\x25\xf9\x1d\xca\x62\x0d\xe1\x2c\xe1\x19\x52\x5b\x6e\x23\xb4\xad\x30\x97\x08\x84\x46\xbe\xab\xeb\xd9\xa3\x06\x93\x4e\x1f\x1e\x72\x48\x34\xa4\xe4\x4f\x62\x4b\x0e\x09\x5e\xdd\x62\xb6\x45\x23\x67\xd3\x1f\x91\xf7\x9b\x93\xd0\xda\x1e\x11\x6b\xa5\x6a\x49\xeb\x1a\x69\xa9\xee\xae\xba\x0f\x32\x88\x84\x23\xb6\x7b\xab\x2e\x9d\x1b\xec\x2a\x4c\xb3\x49\x4b\x12\x2a\xd0\x3e\x0a\x68\xb2\x24\x29\x14\x18\x9c\xa4\x30\x57\xcd\x20\xa1\xab\x02\xc8\xab\x82\xb0\xc2\x42\x5f\xcf\x65\xbb\x6d\x51\x8b\xd8\x9a\xd0\x3d\xcf\x9b\x29\xa0\x37\x0d\xad\xae\xc6\x5e\xd9\x6d\x8d\xf0\x9b\x66\x19\xc4\x17\x1c\x20\x0f\xed\xc4\xce\x29\x56\xe4\xd7\xf6\x39\x24\x52\xa4\x35\xe2\x22\x64\xba\x2c\xff\xfb\x74\x67\x9a\x77\x4d\x72\x0a\xf7\x61\x70\x42\x1f\x58\xb6\xca\xaa\x1b\x0a\x02\x0f\x09\x40\xda\xae\x7e\x4d\x99\xd8\x40\xc5\x8d\xb1\xf6\x1c\x16\xac\x40\xa4\x2f\xba\xf3\xaf\x19\x78\x94\x94\xba\xaa\x0a\xe7\x52\x6a\x3b\xcd\x17\xdd\x91\xc6\x1c\x9a\x92\x9f\xcd\x0a\x2a\x3e\xb4\x14\x23\xf9\xd7\x02\x26\x9d\x11\xc7\x4e\xa0\x66\x40\xb4\x84\xf8\xd2\x35\x7f\x96\xf2\x59\x8a\xc5\xc4\xc5\xb4\xba\x49\xe5\xbd\x08\x07\x77\x1f\x23\xbf\xee\x41\xfa\x63\xd6\x94\x68\xb5\x02\xbf\x5d\x34\x2b\xf9\xdd\x6c\x3a\xdd\xe0\xdd\x3e\x81\x22\xd4\x79\xb5\x4b\x06\xdf\xb3\x9b\x16\xd3\x82\x75\xb6\x2c\xe8\x48\xb4\xda\x56\x8b\xe0\x81\xae\x29\xf0\x7d\x62\x90\x9f\x24\xa0\x34\x65\x82\xc0\x1d\x08\x4d\xa4\xaa\x03\x1c\xfb\x2a\x62\xdd\xca\xc4\xa2\x6d\xb0\xe0\x1d\x97\xc9\x0d\x46\x01\x24\x2b\x23\x20\xda\x61\x55\x40\x41\x72\x69\x5b\x0b\x2d\x49\x0e\x8a\xc9\x94\x21\xd4\x3e\x92\x64\x09\xc9\xcd\x0f\x70\x2c\x9d\xc3\xb1\x89\x74\x8a\x85\xa8\xce\xc6\x50\xb4\xa5\xe0\x7a\xb6\xe4\xba\xd5\x4f\xb5\xfc\x69\x46\x5b\x0c\x6e\x9b\x88\x49\x96\x6e\x31\x61\x2b\xac\xe2\xaf\x45\x13\x3b\xf5\x04\x10\xbf\xe5\x8c\xa2\xee\x75\x0e\xbb\x07\x13\x72\xd5\x59\xac\x78\x9d\x09\xa6\xf7\x96\xe7\x19\x1e\x2d\x06\x9b\x1d\x79\xb5\x4d\x19\x20\xb4\x63\xbc\xde\x99\xb9\xb3\xdb\xa2\xdc\x84\x5e\x15\xde\x28\xb6\x5a\x14\x13\x62\x2d\x70\xc2\x04\x66\xfc\x29\x3e\x43\x70\xe1\x20\x76\x96\xea\xea\x8e\xf3\x95\x98\x10\x34\x7a\x88\x16\x7d\xdd\x31\xe7\x88\x50\xb5\x28\x6a\xa3\x54\x4e\x69\xb7\xbe\xcf\x6c\x8e\xf6\x1e\x3a\x43\xf0\x0e\xb9\x90\xe3\x15\xde\xfa\x40\xca\xf2\xba\xdf\x43\x0c\xb4\xd1\x9e\xe7\x71\xb9\x88\x3f\x52\x4d\x79\x18\x61\x4d\xc0\x0a\x14\xc5\x27\xc5\x22\x0c\x4c\x85\x30\x9d\x03\x46\x68\x54\x79\xc5\x6f\x3b\xc7\x7e\xc3\x33\xed\xa8\x75\xdb\x49\x0b\xe2\x08\xa3\xdc\x94\xa4\x6a\xf5\xdd\x28\x51\x8d\x5f\x61\xd4\x5d\x9c\xb5\xb1\xbf\xb1\x84\x82\x42\xae\x54\x02\x6e\x1b\x60\xbf\xd4\xbb\xf2\x16\xbd\x83\x59\x3b\xd0\x02\xff\x05\x1b\x6f\x76\xc0\x83\x90\xe0\x3d\x50\x4e\xee\x99\x5e\x92\x8d\x83\xa4\xfa\x1c\x6f\xcd\xde\xad\x42\x45\xdb\x54\xdc\xb9\x22\xec\x66\xf8\x70\x82\x57\x6d\x1b\x3c\xd0\x2c\xe7\x50\xb8\x96\xd9\xef\x36\x6f\xf0\x60\xee\xff\x50\x1d\x72\xa9\x55\xbf\xb4\x3f\x25\x01\x31\x4b\xb3\x1a\xbc\x9d\x4e\x38\xad\x84\x11\xd9\x27\x81\xb1\x47\x2d\xaf\xc3\x0b\xf3\x10\x30\x00\xff\x29\x82\x7e\x15\xdf\x01\x3d\x5b\x90\x67\x1b\xf0\x6c\xc5\x9d\x9d\xb0\xd3\x43\x9d\x4d\x6c\x29\x47\x03\xdb\x81\x5d\x88\xf3\x4c\xc0\xa9\xd4\x38\x62\x69\x0a\xa2\x66\x67\xbf\x4e\x4c\xfb\x54\x93\x06\x45\x70\xae\x9a\xd4\x8e\xb5\xa7\x9e\xc4\xb1\x6d\xe8\xf5\x23\xe0\x55\x29\xd1\x5f\x8a\x78\xde\x4c\xa6\x8f\xa3\xf6\x54\xff\x09\x34\x1e\x08\xfb\x7b\x0f\x7b\xfd\xd5\xb0\x84\x65\x39\xb9\x76\x50\x33\xd8\x33\xef\xc0\xab\xaf\x82\xce\x38\x60\x39\xc6\x2e\x1f\x05\xaa\x40\xab\xec\x15\x92\x76\xd3\x1c\x9f\x02\xa4\x45\xb5\x7c\x20\x65\x89\xe3\x49\xd3\xac\xfe\xab\x0e\xe1\xe7\x8d\x80\x4f\x63\xf8\x4b\x91\x7b\xc7\xee\xbd\x59\xba\xff\x98\xcd\x2c\xc6\x27\x6e\x49\xb2\x31\x1e\xd6\x63\xd1\xc6\xc2\xe6\xa3\x54\x19\xb6\xc7\xca\x7d\x0a\x77\x2c\x6a\x76\x31\x77\xf7\x20\xe7\xf6\x56\xa6\x61\x3b\xd4\x01\xda\x49\xe6\xf6\xac\x46\xbf\xa1\x69\xd1\xaf\xd3\x7b\x70\x95\xdc\x82\xad\xc1\xa5\x72\x87\xc7\x55\xd0\xdb\x87\x07\xd7\x64\x5a\x07\xf1\x1e\xf6\xc8\xd7\x0d\xc3\x4e\x84\xed\x18\xae\x07\xe3\x71\xf8\xb7\x45\xe7\x82\x66\xc5\xfb\xe4\x0f\x8c\x4d\xc3\xe1\xdd\x6f\x2f\x14\x5d\x9e\x26\x4a\x0b\x33\xd4\x49\xdb\x5f\x22\x92\xb4\x9b\xb6\x97\xcf\xf5\xcd\x7d\x26\xf1\x6b\xa3\x6e\x8c\xf3\xdb\x43\x77\x67\x00\x3d\x3d\xd7\xb7\xa3\x09\x15\x50\x8b\x2a\xcd\x50\xc1\xfe\xaa\xb8\x3d\xb3\x0f\x79\xa8\xfb\x7b\x4c\xba\x69\xb0\x5e\x14\xfd\xff\x9b\xcc\x85\x4f\x7c\x01\xda\x60\xf9\x1e\x4b\x1d\x88\x3f\x69\xaa\xdd\xbd\xae\x0b\xda\x6d\x70\x39\x14\x88\x2d\xf7\xb5\x40\xf2\x7e\x67\x7f\xbb\xc3\x16\x6e\xf5\x61\xa6\xff\x46\xf9\xb2\xdb\xe8\x6e\xd4\x61\x5b\x9d\xab\x05\x45\x07\x48\x06\xfa\xbc\xc1\xa6\x78\xb8\x27\x76\x4b\xd8\xb0\xd3\x1a\x96\xfe\x7f\x02\x00\x00\xff\xff\xd2\x4b\xbf\x29\x05\x24\x00\x00")

func bindataTemplatesCommandsTmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesCommandsTmpl,
		"templates/commands.tmpl",
	)
}



func bindataTemplatesCommandsTmpl() (*asset, error) {
	bytes, err := bindataTemplatesCommandsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/commands.tmpl",
		size: 9221,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1665823894, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x41\x4b\xc3\x40\x10\x85\xcf\x3b\xbf\x62\xc8\x41\x12\xb0\x9b\x7a\xed\xad\x68\x0e\x5e\xac\x88\x78\x5f\x37\x93\xed\x60\x76\x66\xd9\x6c\x4a\x25\xe4\xbf\x4b\x2a\xe2\xed\xbd\xf7\xf1\x1e\x2f\x39\xff\xe5\x02\x61\x74\x2c\x00\x1c\x93\xe6\x82\x35\x98\x2a\x70\x39\xcf\x9f\xd6\x6b\x6c\x7b\x27\x4c\x63\x28\xee\x7b\xd4\xdc\x6a\x22\x71\x89\x77\x7e\xe4\x5d\x20\xa1\xec\x8a\xe6\xd6\x8f\x5c\x41\x03\x30\xcc\xe2\x6f\x63\x75\x83\x0b\x18\x3f\xb2\x7d\x16\x2e\xf5\xdd\xa6\x1e\x55\x06\x0e\x0b\x18\x73\x4c\xe9\xc5\x45\x3a\x20\x62\xb5\x2c\x68\x37\x83\xeb\x5a\xdd\x83\x31\x9d\x5c\x5e\x33\x0d\x7c\x3d\xfc\xb3\x4e\x2e\x7f\xf8\x83\xf2\xc4\x2a\xb7\xea\x83\xdd\xdb\xfd\x96\xae\x0d\x80\x69\x5b\x7c\x3f\x3d\x9d\x0e\x78\xec\x7b\xcc\x14\x78\x2a\x94\xd1\x6b\x8c\x4e\xfa\x09\xcf\x94\xc9\xc2\xef\xa7\x37\xd5\x62\xbb\x2b\xf9\xb9\x50\xdd\xc0\x0a\x3f\x01\x00\x00\xff\xff\xd7\x90\x9c\xb4\x08\x01\x00\x00")

func bindataTemplatesMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesMainTmpl,
		"templates/main.tmpl",
	)
}



func bindataTemplatesMainTmpl() (*asset, error) {
	bytes, err := bindataTemplatesMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/main.tmpl",
		size: 264,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1664358933, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"templates/commands.tmpl": bindataTemplatesCommandsTmpl,
	"templates/main.tmpl":     bindataTemplatesMainTmpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"templates": {Func: nil, Children: map[string]*bintree{
		"commands.tmpl": {Func: bindataTemplatesCommandsTmpl, Children: map[string]*bintree{}},
		"main.tmpl": {Func: bindataTemplatesMainTmpl, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
